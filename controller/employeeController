package ee.taltech.iti0202.springboot.controller;

import ee.taltech.iti0202.springboot.model.EmployeeRequest;
import ee.taltech.iti0202.springboot.repository.Employee;
import ee.taltech.iti0202.springboot.service.EmployeeService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@RestController
@RequestMapping("/employees")
public class EmployeeController {
    private final EmployeeService employeeService;

    /**
     *
     * @param company the company whose employees are requested
     * @return list of employees from that company
     */
    @GetMapping("")
    public List<Employee> getAllEmployees(@RequestParam(required = false) final String company) {
        if (company != null) {
            return employeeService.findEmployeesByCompany(company);
        }
        return employeeService.findAllEmployees();
    }

    /**
     *
     * @param id employee's id
     * @return object of employee if he exists
     */
    @GetMapping("/{id}")
    public Optional<Employee> getById(@PathVariable final Long id) {
        return employeeService.getById(id);
    }

    /**
     *
     * @param employeeRequest employee to add
     * @return string if that employee was added or not
     */
    @PostMapping("/add")
    public String save(@RequestBody final EmployeeRequest employeeRequest) {
        return employeeService.save(employeeRequest);
    }

    /**
     *
     * @param id employee's id
     * @return string if that employee was deleted or not
     */
    @DeleteMapping("/{id}")
    public String delete(@PathVariable final Long id) {
        return employeeService.delete(id);
    }

    /**
     *
     * @param id employee's id
     * @param employeeRequest information that is changed
     * @return string if that change was made or not
     */
    @PutMapping("/{id}")
    public String update(@PathVariable Long id, @RequestBody final EmployeeRequest employeeRequest) {
        return employeeService.update(id, employeeRequest);
    }
}
